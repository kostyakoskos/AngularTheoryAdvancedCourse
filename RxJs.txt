RxJS - библиотека, позволяющая работать с событиями, данными, объектами, асинхронностью. Можно обернуть какой-то кусок кода в RxJS стрим. И внутри кода можем подписаться на этот стрим и узнавать,
что что-то случилось в таком-то месте.

Есть 2 библиотеки для использования:
import from 'rxjs' - некоторые элементы, позволяющие создавать новые стримы.
import from 'rxjs/operators'- относится к операторам.

$ - обозначение переменной, в которой содержится какая-то реактивность.
const intervalStream$ = interval(1000);

Суть RxJS: обернули ф-цию interval(1000), где-то в любом другом месте на неё подписались, и на каждое изменение этого кусочка кода что-то делаем.
const intervalStream$ = interval(1000);
intervalStream$.subscribe((value) => {
 console.log(value);
})

Методы: 
1. Complite - вызывается только если не было никаких ошибок. Если ошибка есть, даже обработанная, то этот метод не вызывается.
2. pipe - позволяет принимать некоторое количество операторов в RxJS

Операторы RxJS: Можно очень гибко манипулировать данными которые есть в стриме. Операторов очень много.
1.
2. 
3. filter
4. map
5. switchmap

класс Subject- расширенный класс observable. Можно не только подписываться на события, но также делать emmit.