js в определенный момент стало сложно поддерживать, поэтому на его смену пришли разные frontend фреймворки.2
Представлен google в 2012 году. Структура mvc. Нацелена на динамическое обновление страниц.
angular поддерживается на мобильных приложениях, десктопных, веб.
angular использует typescript.
Минусы angular:
1. Много весит
2. Нужно знать typescript и библиотеку rx.js .
Angular следует исопльзовать на средних и больших проектах.
Angular для разработки одностраничных приложений. 
Пример - это gmail. Sumsung, paypal, dauche bank.
Angular поддерживает unit тестирование и сквозное тестирование.

bindings- для связки. Явно указать angular что будет динамический аттрибут. binding есть двухстронний. Binding может быть автоматический, но не для js, объектов, чисел. Автоматический binding только для строк.
Например, в .html сделали новую кнопку. <button [disabled]='disabled'>
В .ts файле, в методе ngOnInit сделали setTimeout и поле disabled делае true спустя 4 c.

Incremental DOM используется компанией Google для внутренних нужд. Его основная идея такова.
Каждый компонент компилируется в набор инструкций, которые создают DOM-деревья и непосредственно обновляют их при изменении данных.

Разновидности скобок:
[] - пишем в .html, говорим что будет изменяться какая-то переменная.
() - пишем в .html, берем какую-то интеракцию от шаблона к компоненту.
[()] - для двухстороннего связывания.

Event binding - из html в typescript.

$event - передать событие в .html . это native event и angular будет сам его передавать.

#myInput - ссылка на данный input

* данная директива сигнализирует, что надо менять на html.
Т.е. получается что через * можно указать if в файле component.html . For также можно указать.

trim - пустая или нет строка.

Можно динамически добавлять класс.

Декортаоры:
1. @HostListene - слушать событие, например клик.	
2. @Input 
3. @HostBinding
4. @Injectable - чтобы можно было добавить параметры в конструктор. Если данного декоратора не будет, то в сервис мы не сможем ничего инжектировать. Является частью механизма DI.

Виды событий:
1. Click
2. mouseenter - мышь зашла на данный элемент
3. mouseleave - мышь покаинула элемент.

Запуск  ng serve --o
ng g c post-component --skipTests - создание компонента.
ng g d style2 --skipTests - Создание директивы.

ctrl + d - выбрать несколько
ctrl + shift + b - меню сверху вызвать

Как связать back-end и front-end? 
1. Services.addCors();
2.  app.UseCors(options => 
                options.WithOrigins("http://localhost:4200")
                    .AllowAnyMethod()
                    .AllowAnyHeader()
                );

Точка входа- main.ts .

Компоненты, директивы, модули - это классы.

Как создать компоненты в angular? В .ts файле пишем export класс и @Component.

Пайпы - позволяют трансформировать дату и время в нужный формат.   {{ now | date }} - тут отфрматировали в pipe date.\
Также пайпы позволяют филтровать список элементов, например по какому-то полю.

Создание директивы. Скобки [] обязательны.
@Directive({
selector:'[app-style]'
})

Сервисы - это отдельные классы в angular, которые позволяют работать с данными. Позволяют связывать данные с отображением. Сервисы создаются для стороннего исопользования.
Как создавать сервисы? Два варианта:
1.Создать класс. Зарегистировать класс в @NgModule provider или написать декоратор @Injectable с параметром providedIn. 
Т.е. либо мы регистрируем сервис в NgModule, либо в декораторе пишем providedIn.
2. ng g s serices/local-counter --skipTests
Область вилимости сервисов. Сервисы можно создать на самом нижнем(большом, глобальном) уровне root. Когда компоненту требуется сервис, сначала проверяется root, а потом выше смотрится.
Если есть 2 сервиса в root и где-то ещё сервис с таким же названием, то будет использован сервис который находится в root, дальше смотреть не будем.
Как правильно используют глобальную видимость? Создают сервис на уровне root, который используют в разных местах и получают необходимые данные. Подобный подход очень удобный.

Как сделать dependency injection в angular? Необходимо реализовать метод конструктора. 

Модификаторы доступа: public private protected. Причем, модификаторы доступа работают немного по другому в angular 12, например private. Лучше вместо него писать public.

Есть 2 подхода к созданию форм: reactive подход и шаблонный.
Реактивные формы- мы делаем их программно.
Класс Validators- для валидирования формы. Например, в классе Validators есть проверка на email, длинна и тд.

Хуки Angular:
1. ngOnChanges: вызывается каждый раз, когда изменяется свойство ввода, привязанного к данным. В первый раз он вызывается перед обработчиком ngOnInit. Этот хук получает объект SimpleChanges, который содержит предыдущие и текущие значения для свойств ввода с привязкой к данным. Он вызывается часто, поэтому рекомендуем ограничить объем выполняемой им обработки.
2. ngOnInit: вызывается один раз при инициализации компонента.
3. ngDoCheck: этот хук можно использовать вместо ngOnChanges для отслеживания изменений, которые Angular не обнаруживает. Он вызывается при каждом цикле обнаружения изменений, поэтому для производительности важно свести работу этого хука к минимуму.
4. ngAfterContentInit: вызывается после проецирования контента в компоненте.
5. ngAfterContentChecked: вызывается после проверки проецируемого контента.
6. ngAfterViewInit: вызывается после инициализации представления родительского или дочернего компонента.
7. ngAfterViewChecked: вызывается после проверки представления родительского или дочернего компонента.
8. ngOnDestroy: вызывается один раз при уничтожении компонента. Этот хук хорошо подходит для очистки и отмены подписки на наблюдаемые объекты.

Вопросы:
1. Что такое Guards? Guards - это такая сущность в angular, который решает можно ли загрузить компонент на страницу(т.е. можно ли пользователю войти как админ, например).
2. Что такое модули? Модкли - некотрый набор сущностей, как строительные блоки в доме. import {} from '@angular/core'
@NgModule{
imports - другие модули для поделючения
provider - для необходимых сервисов
declarations - для компонентов, директивов, пайпов
exports - публичные сущности, которые доступны в этом модуле.
bootstrap - тот компонет,  с которго загружаем модуль.
}
3. Отличие angularjs и angular.
angularjs это более старая версия. В angular используется typescript, es6. Потом появился angular 2. Сейчас 12 версия angular. 
4. Что такое компоненты? Компонет- базовый, строительный блок.
5. Что обязательно у Component? Template или templateUrl. Selector необязательно
6. Отличие модуля от компонента. Компоненты контролируют html. Модули состоят из 1-го и более компонентов.
7. Что такое сервисы и зачем они нужны? Сервисы в angular хранят данные. Сервисы не взаимодецствуют с html, а только работабт с данными. Можно регистрировать 1 сервис на все приложение
и использовать в нескольких компонентах.
8. Разница между *ngIf и [hidden]. ngIf убирает элемент из dom дерева. А [hidden] скрывает отображение просто. Hidden не меняет html.
9. Разница меджду @Component и @Directive? Директивы задают модель поведения(добавление стилей, событий) работают в рамках компонента. Компоненты работают в среде html. 
10. 
11. Разница между структурной и аттрибут директивой. *ngIf *ngFor - могут менять html шаблон. *- для обозначения структурной директивы. Аттрибут директива не меняет html. 
Имеет определнное поведение. Пример- ngStyle и ngClass. 
12. Что такое Observables? Это паттерн проектирования, который используется за счет библиотеки rxjs. Если мы подписываемся на уведомление, и оно приходит сразу в нужных местах.
13. Что такое интерполяция? Это просто синтаксис, который позволяет передавать динамические элементы в шаблон. Например {{ }}. Можно менять на любой синтаксис.
14. Разница между Promise и Observable? Оба этих класса работают с асинхронным кодом. Promise работает с единственным событием. элементы в Promise нельзя отменять. 
Асинхронные события, которые мы оборачиваем в Promise- будут выполнены. И не важно, есть блок then или нет. Observable - если нет никаких подписчиков, то события не будут выполняться.
15. Разница constructor и ngOnInit? Конструктор вызывается когда создается экземпляр класса. ngOnInit - компонент готов к работе.
16. Что такое реактивное программирование в angular. Реактивное программирование - это программирование с асинхронными, различными datastream. 
17. Зачем использовать spy в тестах? Фреймворк jasmin - для тетсирования angular. Фунция spy помогает отслеживать. 












